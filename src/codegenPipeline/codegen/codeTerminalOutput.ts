import { sortByPackage } from "../utils/filterPackages";
import { packageListFile } from "../utils/packageListJson";
import { cleanupPath } from "./utils/cleanupPath";
import { findModuleImplementation } from "./utils/resolveDefaultExportPath";

const line = (pkgName: string, importPath: string) => `"${pkgName}": ConfigPluginOptions<typeof import("${cleanupPath(importPath)}")["default"]>;`;

const emptyStrArr = (): string[] => [];

export const getConfigPluginTypeCode = async (): Promise<string> => {
    const packageList = (await packageListFile().load()).filter((pkg) => pkg.hasConfigPlugin).sort(sortByPackage);
    const out = {
        errors: emptyStrArr(),
        correct: emptyStrArr(),
        tsIgnored: emptyStrArr(),
        aliased: emptyStrArr(),
        pathOverrides: emptyStrArr(),
        untyped: emptyStrArr(),
    } satisfies Record<string, string[]>;

    for (const { npmPkg, override } of packageList) {
        if (!npmPkg) continue;
        try {
            // biome-ignore lint:  lint/complexity/useOptionalChain not possible here (because of false)
            const path = override && override["path"] ? override.path : await findModuleImplementation(npmPkg);
            if (override && override.tsIgnore === true) {
                out.tsIgnored.push("// @ts-expect-error [override]");
                out.tsIgnored.push(line(npmPkg, path));
                override.alias?.forEach((alias) => {
                    out.tsIgnored.push(line(alias, path));
                });
            } // biome-ignore lint:  lint/complexity/useOptionalChain not possible here (because of false)
            else if (override && override.path) {
                out.pathOverrides.push("// path-override:");
                out.pathOverrides.push(line(npmPkg, path));
                override.alias?.forEach((alias) => {
                    out.pathOverrides.push(line(alias, path));
                });
            } else if (override === false) {
                out.correct.push(line(npmPkg, path));
            } else if (override?.alias) {
                out.aliased.push("// aliased:");
                out.aliased.push(line(npmPkg, path));
                override.alias?.forEach((alias) => {
                    out.aliased.push(line(alias, path));
                });
            } else {
                out.untyped.push("// @ts-expect-error [Package doesn't ship types for app.plugin.js]");
                out.untyped.push(line(npmPkg, path));
                override?.alias?.forEach((alias) => {
                    out.untyped.push(line(alias, path));
                });
            }
        } catch (e) {
            out.errors.push(`// ${e instanceof Error ? e.message : e}`);
        }
    }

    const template = `
import type { ConfigPluginOptions } from "./types";

// This file is auto-generated by the codegenCli

export interface ThirdPartyAutomatedPlugins {
    // Packages with ts-ignore override:
    ${out.tsIgnored.join("\n    ")}

    // Packages with manual path override:
    ${out.pathOverrides.join("\n    ")}
    
    // Packages with detected types:
    ${out.correct.join("\n    ")}
    
    // Packages with custom alias:
    ${out.aliased.join("\n    ")}
    
    // Packages without types:
    ${out.untyped.join("\n    ")}
}
`;

    return template;
};
